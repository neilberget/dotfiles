# Create a new directory and enter it
md() {
  mkdir -p "$@" && cd "$@"
}

# Test if HTTP compression (RFC 2616 + SDCH) is enabled for a given URL.
# Send a fake UA string for sites that sniff it instead of using the Accept-Encoding header. (Looking at you, ajax.googleapis.com!)
httpcompression() {
  encoding="$(curl -LIs -H 'User-Agent: Mozilla/5 Gecko' -H 'Accept-Encoding: gzip,deflate,compress,sdch' "$1" | grep '^Content-Encoding:')" && echo "$1 is encoded using ${encoding#* }" || echo "$1 is not using any encoding"
}

# All the dig info
digga() {
  dig +nocmd "$1" any +multiline +noall +answer
}

# Set the terminal's title.
title () {
  echo -ne '\033]0;'"$@"'\a';
}

# Compile all *.coffee files and combine into provided output file
csc () {
  find . -name "*.coffee" | xargs coffee --join "$@.js" --compile
}

# scptar myfile neil@example.com
# tar czf $1 | ssh $2 "tar xz"
scptar () {
 echo "$1"
 echo "$2"
 tar czv "$1" | ssh "$2" "tar xz"
 #cd && tar czv src | ssh example.com "tar xz"
}

function todo() { if [ $# == "0" ]; then cat $TODO; else echo "â€¢ $@" >> $TODO; fi }

function todone() { sed -i -e "/$*/d" $TODO; }

# grep recursively through all files in current folder and children folders
function grepr() { grep -rn --color "$1" .; }

function gh_project() {
  cat .git/config  | grep url | cut -d: -f2 - | cut -d. -f1
}

function ghc() { 
  project=`cat .git/config  | grep url | cut -d: -f2 - | cut -d. -f1`
  open "https://github.com/$project/compare/$1...master"; 
}

function g! { grep -nr --exclude=.git --exclude=.hg --exclude=.svn --include="*.$1" "$2" ${3-"."} --colour; }

function simple_prompt {
 export PS1="\[\]\u \[\]at \[\]\h \[\]in \[\]\w\[\]\n$ "
}

function pr () {
  local base=$1
  if [ -z "$1" ]; then
    base="master"
  fi
  local repo=`git remote -v | grep -m 1 "(push)" | sed -e "s/.*github.com[:/]\(.*\)\.git.*/\1/"`
  local branch=`git name-rev --name-only HEAD`
  echo "... creating pull request for branch \"$branch\" to \"$base\" in \"$repo\""
  open https://github.com/$repo/compare/$base...$branch
}

export -f pr

function fpr () {
  echo git fetch origin pull/$1/head:pr$1
  git fetch origin pull/$1/head:pr$1
  echo git checkout pr$1
  git checkout pr$1
}
